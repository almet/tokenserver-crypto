/**
 * Powerhose worker spawning the processus and receiving / sending back
 * messages through zeromq.
 **/
#include <iostream>
#include "tokencrypto.h"


using namespace tokencrypto;
using namespace std;

int main(int argc, const char *argv[])
{
    // byte ikm[80] = { 
    //     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    //     0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    //     0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21,
    //     0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d,
    //     0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
    //     0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45,
    //     0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f };

    byte* salt = generateRandomSalt(DEFAULT_SALT_SIZE);
    cout << salt << endl;

    writeFile("master", salt, DEFAULT_SALT_SIZE);

    byte* master = readFile("master");
    cout << master << endl;

    byte* okm = deriveKey(DEFAULT_SALT_SIZE,
                                  master, DEFAULT_SALT_SIZE,
                                  salt, DEFAULT_SALT_SIZE);
    cout << okm << endl;
    return 0;
}
